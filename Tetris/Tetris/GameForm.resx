<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAsGAQAAAAwAAAAPAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAFAwIAAAAUADEaTABMKGEAAAAkAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAADAAAAGgBBIGAOu2bNFdF16AB0OogAAAAtAAAACAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACEAVShxAL9c2x3jfv8x54r/ANNm8gCDPpoABwM3AAAACwAe
        DQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAkAGkugQDEWecA2mP/LOB//0vlkv8A2mT/ANJg+ACR
        QawAFwpEAAAAEAALBQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAKA1aT4MCwljuANRa/xHXZ/+F7LP/mvHD/x3Z
        bv8A01n/AM9Y/ACcQL4AKhFTAAAAFQAEAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhP1YAAAAACQAAADIsWpCRLZjH7gLJXP8a02P/mu29/+f+
        9P/U/+7/jfC8/yDUaf8AzE//AMtP/wCkPs4AOxViAAAAGwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChMaAAAAAA0HDRA9OnKho0mc9vUsm9v/IMlq/5Tt
        uf/Z//D/1//w/8b/6f+x/+H/fPC2/yHQY/8AxUX/AMVF/wCoOdwASxhyAAAAIgAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQHCwEAAAARDxwlSUSCtbRRp/n6PZX//yiQ
        4f9047T/s//h/7n/5P+4/+T/rf/f/5v/2f+I/9L/Z/Kx/yjPZP8Bvzz/AL46/wCqMucAWhmEAAAAKwAA
        AAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAgMCAAAAFxYrPVhFisbFUKf8/j6X
        //83jP//XrX7/37l4v+P/NX/mf/Y/5j/1/+Q/9T/gv/P/3D/yP9d/8L/T/at/y3Raf8FuTX/ALcv/wCq
        KvAAZxeWAAMBNQAAAAoAIQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAB0YNlVoPofV1EWd
        //84kP//PpD//2W3//+M4v//jOT8/3Ph3/90+cv/eP/L/3H/yf9m/8T/V/+//0X/uP8x/7H/Lfml/yrU
        a/8Isy7/ALAk/wCnIfcAcRSpAA8CQQAAAA4ACQEBAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAlEzlteS17
        4eExiv//K4L//z2M//9aq///bcT//3jP//+C2f//gNj8/2LW2/9V9b//Uv+8/0n/uf88/7T/LP+u/xr/
        p/8H/6D/Efia/yjUbP8Mryn/AKgZ/wCkF/wAeA66ABwCTQAAABMAAAAAAAAAAAAAAAAAAAAIAAAALwc2
        hosVZ+vrF3D//xpw//83g///RZb//0yk//9Yr///Yrn//2nB//9vx///b8X+/0vLzv8w+av/Kf+t/x7/
        qf8Q/6P/BP6d/wD7l/8A95H/C/KN/yPTaf8PqyT/AKEO/wCeDP8AfgfHADYBUAAAAAAACR0AAAAADAAD
        CjkAMpadAlPu8wJZ/P8OYPv/LXb9/yl8//8rhP//N4///0Ka//9Mo///Vqz//16x//9St+n/Ltuv/yH8
        pv8e/6j/F/6l/xH9oP8N+pr/CPaT/wTyi/8A7oP/Bel+/xrRYf8Ppx7/AJoE/wCYAv8AfgGeAAIJAQAA
        ABAACBxGADGfrwBJ5fkATO//EVnv/yls9f8PYfz/CWP//xlx//8sgf//QJD//0+c//9Zov//SK3e/yjc
        pv8w/Kn/N/2u/zf8rf83+qr/Nvio/zb2pP8085//L/CY/ybsj/8a54P/EON4/xXNWv8LpBj/AJcA/wCD
        AKcAAAAVAAssUgAsosAAPtj9AEHe/xVR4v8lYen/B1Lv/wNU9f8VZPv/K3b+/zyE//9GjP//SJD//zai
        0/8v3KH/Qvmq/0f5rv9H+K3/R/es/0f2qv9I9Kj/R/Om/0jwo/9J7p//Seub/0jolv9E5ZD/N+CE/xvM
        Wv8FpRb/AIQApQARS1AAJqLMADLJ/wE1zf8VR9T/HFHb/wdH4f8WV+n/L2zw/zx49f89fPj/PX/8/z1+
        +/9bhbL/RdCN/1P2rf9Y9a7/V/Su/1f0rf9X86z/WPKr/1Lxp/9R6Iz/VOqY/1fsov9Y6Z7/WOea/1nk
        l/9a4pP/UN6K/yLJWP8BoB+RBCKUlQQquP8ELLz/EzvE/xRBzf8SRtX/MGDf/0Jy5v9Fdur/RHnu/0N7
        8/9Bd+3/g4Cc/+ajR/+5skf/Zt2O/2TysP9n8bD/Z/Gv/2jxr/9e7qj/btx1/9DHP/+pz1P/YeSQ/2bo
        o/9p5p//aeSc/2rimf9d3Iz/NM5rqwGxPyUKIYyaDSmq/xMys/8WOr//KU/M/0Vp1/9Mct3/S3Th/0t3
        5P9Keen/SXHb/5J8iP/rok//965Q//msRv/JrEL/ddSB/3Hvsf9477T/aeum/4HSaP/lvz3//78+//7A
        Ov+6x0j/bt2F/3bmpf965KP/YNyN+i/KZpQApDQUD9FRABEgg5cWKqD/J0C0/0Zgx/9Vb9D/VHDU/1Ny
        2P9Tddv/UXbf/1Nsyf+henj/6Z1V/++lV//xqFX/9KxU//isTf/VqUH/hMp0/23jm/+Sxlv/8Lg+//+8
        Rf//vUT//75B//+9PP/LwD//etR2/1rZhvIkxVx6AIwXCgvGSwAp/58AFiOIdjlJq/peb8P/YnXI/190
        zP9dddD/XHXU/1t31/9QbtP/hmJ1/+WUVf/pn1//6qFc/+2kWv/vp1j/8apW//asUv/eqET/t69C//Gw
        RP/+t0z//rlK//66SP//u0b//7tE//+6Pf/PtjLgNrpCXgBeAAQAtTwACP9eAAAKAwAPG3wRPkulhF9s
        u/ZrecX/aXrJ/2d6zP9me8//ZHvS/2J71f9iarX/oWtm/+GSWf/onmL/6aBf/+ujXf/tpVv/76hZ//Oq
        Vv/2qlH/9q5T//exUf/5s0//+7RM//y2Sv/+tkT/+q4yx/WhHzsA/7wAN6AsAAHURgAAAAAAAAAAABwp
        kwAAAE0GOkaga2Fsuexzf8X/coDJ/3CAzP9vgc7/boHR/2uC1f9kcsH/kWd0/9iLWf/onmT/6J9i/+qh
        YP/so17/7aVc/++nWv/xqVf/8qtV//SsU//2rlL/96xH/9eOKdB4Tg0+AAAAAUQwBwAAAAAAAAAAAAAA
        AAAAAAAAJTfAABUihgAAAAABN0KaVGJrtt96hMX/e4bJ/3mGy/94hs3/d4fP/3aI0/9sfMn/g2eG/8yD
        Xf/lnGf/5p5m/+igY//qoWH/66Nf/+2kXP/uplr/76dY/++gSP/nhSL/ym0T4V0yCXQAAAAhAAAABAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHCqbAAkUbgDP3P8AMjuSPWJqsc6AiMT/g4zI/4KMyv+BjMz/gI3O/4GO
        0P9tfcn/bVR+xdiDTtfjmWj/5Z1p/+aeZv/nn2T/6aBh/+qiX//ro13/6ZZG/913Jf/aaxT/yGUS6Go1
        CYAAAAAjAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAFB98AAAATQBmcdAALDOHK2JnrLqFisL/jJLI/4qS
        yf+Kksv/eYPF+0tasZwCIpoawFgbMdZ9Sb7glWf/45xt/+Scaf/lnWf/5p5l/+ieYv/pn1//55lW/9x6
        Mv/UYRL/x1wQ7X87CnUAAAAMEggBAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhddAAAAAABOVK8AIiZ4G2Bj
        paOJi7/9lJfH/3l+u/NHT6J+AAVrDCY2nwDseTYAs0kQHdF0Q6LdkGb84ppv/+KabP/jm2r/5Jto/+Wc
        Zf/mnGP/5JVW/9dtJP/OVQ7/uk4NuBsMAhE7GQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAwvAP//
        /wA/QpcAEhJiEGBgn4twb6vaQ0aSYgAAHQQcJ4wAM0HHAP///wDTYCQAnjAADstrPILaimP04Jhy/+CY
        b//hmG3/4phq/+KYaP/jmWb/4ZFX/9VqJ/+8SAy0KgsBDE4cBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABQUVAFxd1gA0NIgADgpdCSYjdiMAAAABFRl1ACYuogAAAAAAGwoBAP98KwC9TBYAXwAABcRg
        NGPWg1/m3pZ0/9+Xc//flnD/35Zt/+CWbP/ekGD/1nU43MRTD1cAAAABYiMGAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADg1lwArKHQALit8AB0bYwAlI4EAAAAAAAAAAAAAAAAAAAAAAONX
        GACqOQkA////ALxUK0XRe1nS25J0/92Vdv/dlHP/2INb+81nM6y9ThAv/51AAI0yBQCGLwgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMRCDgCGHgAA/5ZpALFEHy3McVO314lu/89zUuLBUiVwnycADdJZGABuJgAAt0wLAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIUpCAAHAAAA22M8AKk5GR6/UTGItT0YQ////wC1PAgA/2QWADMT
        AwAAAAAAAAAAAAAAAAAAAAAA//gA///wAH//4AA//4AAH/8AAA/+AAAH/AAAAfgAAADwAAAAwAAAAIAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAABAAAAAYAA
        AAHAAAAB4AAAAfgAAAH8BgAB//8AA///gAc=
</value>
  </data>
</root>